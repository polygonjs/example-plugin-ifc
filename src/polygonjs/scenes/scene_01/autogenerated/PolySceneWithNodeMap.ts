import { ParamValueSerializedTypeMap } from "@polygonjs/polygonjs/dist/src/engine/params/types/ParamValueSerializedTypeMap";

import { PolyScene } from "@polygonjs/polygonjs/dist/src/engine/scene/PolyScene";
// obj
import { GeoObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/Geo";
// sop
import { BVHSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/BVH";
import { CameraControlsSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/CameraControls";
import { HemisphereLightSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/HemisphereLight";
import { HierarchySopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Hierarchy";
import { InstancedMeshToMeshSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/InstancedMeshToMesh";
import { MaterialSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Material";
import { MaterialsNetworkSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/MaterialsNetwork";
import { MergeSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Merge";
import { NullSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Null";
import { PerspectiveCameraSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/PerspectiveCamera";
import { PolarTransformSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/PolarTransform";
import { SpotLightSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/SpotLight";
import { TransformSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Transform";
// dist
import { FileIFCSopNode } from "@polygonjs/plugin-ifc/dist/index.es";
// mat
import { MeshStandardBuilderMatNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/mat/MeshStandardBuilder";
// event
import { CameraOrbitControlsEventNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/event/CameraOrbitControls";
import { FirstPersonControlsEventNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/event/FirstPersonControls";

export class PolySceneWithNodeMap_scene_01 extends PolyScene {
  node(path: "/geo1"): GeoObjNode;
  node(path: "/geo1/BVH1"): BVHSopNode;
  node(path: "/geo1/fileIFC1"): FileIFCSopNode;
  node(path: "/geo1/material1"): MaterialSopNode;
  node(path: "/geo1/merge1"): MergeSopNode;
  node(path: "/geo1/transform1"): TransformSopNode;
  node(path: "/geo1/fileIFC2"): FileIFCSopNode;
  node(path: "/geo1/fileIFC3"): FileIFCSopNode;
  node(path: "/geo1/hierarchy1"): HierarchySopNode;
  node(path: "/geo1/instancedMeshToMesh1"): InstancedMeshToMeshSopNode;
  node(path: "/geo1/merge2"): MergeSopNode;
  node(path: "/geo1/hierarchy2"): HierarchySopNode;
  node(path: "/geo1/instancedMeshToMesh2"): InstancedMeshToMeshSopNode;
  node(path: "/geo1/merge3"): MergeSopNode;
  node(path: "/geo1/merge4"): MergeSopNode;
  node(path: "/geo1/null1"): NullSopNode;
  node(path: "/geo1/MAT"): MaterialsNetworkSopNode;
  node(path: "/geo1/MAT/meshStandardBuilder_DOORS"): MeshStandardBuilderMatNode;
  node(path: "/lights"): GeoObjNode;
  node(path: "/lights/hemisphereLight1"): HemisphereLightSopNode;
  node(path: "/lights/merge1"): MergeSopNode;
  node(path: "/lights/polarTransform1"): PolarTransformSopNode;
  node(path: "/lights/spotLight1"): SpotLightSopNode;
  node(path: "/cameras"): GeoObjNode;
  node(path: "/cameras/merge1"): MergeSopNode;
  node(path: "/cameras/perspectiveCamera_FPS"): PerspectiveCameraSopNode;
  node(
    path: "/cameras/perspectiveCamera_ORBIT_CONTROLS"
  ): PerspectiveCameraSopNode;
  node(path: "/cameras/cameraControls1"): CameraControlsSopNode;
  node(
    path: "/cameras/cameraControls1/cameraOrbitControls1"
  ): CameraOrbitControlsEventNode;
  node(path: "/cameras/cameraControls2"): CameraControlsSopNode;
  node(
    path: "/cameras/cameraControls2/firstPersonControls1"
  ): FirstPersonControlsEventNode;
  node(
    path: string
  ): any /* we need any for now as otherwise an error occurs when adding plugins to the overloaded methods */ {
    return super.node(path);
  }
}

export interface PolySceneProps_scene_01 {
  "geo1--transform"?: ParamValueSerializedTypeMap["folder"];
  "geo1--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "geo1--t"?: ParamValueSerializedTypeMap["vector3"];
  "geo1--t-tx"?: ParamValueSerializedTypeMap["float"];
  "geo1--t-ty"?: ParamValueSerializedTypeMap["float"];
  "geo1--t-tz"?: ParamValueSerializedTypeMap["float"];
  "geo1--tx"?: ParamValueSerializedTypeMap["float"];
  "geo1--ty"?: ParamValueSerializedTypeMap["float"];
  "geo1--tz"?: ParamValueSerializedTypeMap["float"];
  "geo1--r"?: ParamValueSerializedTypeMap["vector3"];
  "geo1--r-rx"?: ParamValueSerializedTypeMap["float"];
  "geo1--r-ry"?: ParamValueSerializedTypeMap["float"];
  "geo1--r-rz"?: ParamValueSerializedTypeMap["float"];
  "geo1--rx"?: ParamValueSerializedTypeMap["float"];
  "geo1--ry"?: ParamValueSerializedTypeMap["float"];
  "geo1--rz"?: ParamValueSerializedTypeMap["float"];
  "geo1--s"?: ParamValueSerializedTypeMap["vector3"];
  "geo1--s-sx"?: ParamValueSerializedTypeMap["float"];
  "geo1--s-sy"?: ParamValueSerializedTypeMap["float"];
  "geo1--s-sz"?: ParamValueSerializedTypeMap["float"];
  "geo1--sx"?: ParamValueSerializedTypeMap["float"];
  "geo1--sy"?: ParamValueSerializedTypeMap["float"];
  "geo1--sz"?: ParamValueSerializedTypeMap["float"];
  "geo1--scale"?: ParamValueSerializedTypeMap["float"];
  "geo1--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "geo1--display"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--renderOrder"?: ParamValueSerializedTypeMap["integer"];
  "geo1--CAD"?: ParamValueSerializedTypeMap["folder"];
  "geo1--CADLinearTolerance"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADAngularTolerance"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADCurveAbscissa"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADCurveTolerance"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADDisplayEdges"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--CADEdgesColor"?: ParamValueSerializedTypeMap["color"];
  "geo1--CADEdgesColor-CADEdgesColorr"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADEdgesColor-CADEdgesColorg"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADEdgesColor-CADEdgesColorb"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADEdgesColorr"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADEdgesColorg"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADEdgesColorb"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADDisplayMeshes"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--CADMeshesColor"?: ParamValueSerializedTypeMap["color"];
  "geo1--CADMeshesColor-CADMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADMeshesColor-CADMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADMeshesColor-CADMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "geo1--CADWireframe"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--CSG"?: ParamValueSerializedTypeMap["folder"];
  "geo1--CSGFacetAngle"?: ParamValueSerializedTypeMap["float"];
  "geo1--CSGLinesColor"?: ParamValueSerializedTypeMap["color"];
  "geo1--CSGLinesColor-CSGLinesColorr"?: ParamValueSerializedTypeMap["float"];
  "geo1--CSGLinesColor-CSGLinesColorg"?: ParamValueSerializedTypeMap["float"];
  "geo1--CSGLinesColor-CSGLinesColorb"?: ParamValueSerializedTypeMap["float"];
  "geo1--CSGLinesColorr"?: ParamValueSerializedTypeMap["float"];
  "geo1--CSGLinesColorg"?: ParamValueSerializedTypeMap["float"];
  "geo1--CSGLinesColorb"?: ParamValueSerializedTypeMap["float"];
  "geo1--CSGMeshesColor"?: ParamValueSerializedTypeMap["color"];
  "geo1--CSGMeshesColor-CSGMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "geo1--CSGMeshesColor-CSGMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "geo1--CSGMeshesColor-CSGMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "geo1--CSGMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "geo1--CSGMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "geo1--CSGMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "geo1--CSGWireframe"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--QUAD"?: ParamValueSerializedTypeMap["folder"];
  "geo1--QUADTriangles"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--QUADSplitQuads"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--QUADWireframe"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--QUADWireframeColor"?: ParamValueSerializedTypeMap["color"];
  "geo1--QUADWireframeColor-QUADWireframeColorr"?: ParamValueSerializedTypeMap["float"];
  "geo1--QUADWireframeColor-QUADWireframeColorg"?: ParamValueSerializedTypeMap["float"];
  "geo1--QUADWireframeColor-QUADWireframeColorb"?: ParamValueSerializedTypeMap["float"];
  "geo1--QUADWireframeColorr"?: ParamValueSerializedTypeMap["float"];
  "geo1--QUADWireframeColorg"?: ParamValueSerializedTypeMap["float"];
  "geo1--QUADWireframeColorb"?: ParamValueSerializedTypeMap["float"];
  "geo1--QUADCenter"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--QUADInnerRadius"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--QUADOuterRadius"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--QUADPointAttributes"?: ParamValueSerializedTypeMap["string"];
  "geo1--QUADPrimitiveAttributes"?: ParamValueSerializedTypeMap["string"];
  "geo1--TET"?: ParamValueSerializedTypeMap["folder"];
  "geo1--TetScale"?: ParamValueSerializedTypeMap["float"];
  "geo1--TetDisplayOuterMesh"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--TetDisplayTetMesh"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--TetDisplayLines"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--TetDisplaySharedFaces"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--TetDisplayPoints"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--TetDisplayCenter"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--TetDisplaySphere"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-BVH1--strategy"?: ParamValueSerializedTypeMap["integer"];
  "geo1-BVH1--maxDepth"?: ParamValueSerializedTypeMap["integer"];
  "geo1-BVH1--maxLeafTris"?: ParamValueSerializedTypeMap["integer"];
  "geo1-BVH1--verbose"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-BVH1--keepOnlyPosition"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-fileIFC1--url"?: ParamValueSerializedTypeMap["string"];
  "geo1-fileIFC1--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-fileIFC1--coordinateToOrigin"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-fileIFC1--includedCategories"?: ParamValueSerializedTypeMap["string"];
  "geo1-fileIFC1--reload"?: ParamValueSerializedTypeMap["button"];
  "geo1-fileIFC1--foundCategories"?: ParamValueSerializedTypeMap["string"];
  "geo1-material1--group"?: ParamValueSerializedTypeMap["string"];
  "geo1-material1--assignMat"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-material1--material"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-material1--cloneMat"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-material1--shareCustomUniforms"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-material1--swapCurrentTex"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-material1--texSrc0"?: ParamValueSerializedTypeMap["string"];
  "geo1-material1--texDest0"?: ParamValueSerializedTypeMap["string"];
  "geo1-merge1--compact"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-merge1--preserveMaterials"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-merge1--inputsCount"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform1--applyOn"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform1--group"?: ParamValueSerializedTypeMap["string"];
  "geo1-transform1--objectMode"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform1--objectTransformSpace"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform1--pointGroup"?: ParamValueSerializedTypeMap["string"];
  "geo1-transform1--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform1--t"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform1--t-tx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--t-ty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--t-tz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--tx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--ty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--tz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--r"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform1--r-rx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--r-ry"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--r-rz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--rx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--ry"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--rz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--s"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform1--s-sx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--s-sy"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--s-sz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--sx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--sy"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--sz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--scale"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivot"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform1--pivot-pivotx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivot-pivoty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivot-pivotz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivotx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivoty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivotz"?: ParamValueSerializedTypeMap["float"];
  "geo1-fileIFC2--url"?: ParamValueSerializedTypeMap["string"];
  "geo1-fileIFC2--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-fileIFC2--coordinateToOrigin"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-fileIFC2--includedCategories"?: ParamValueSerializedTypeMap["string"];
  "geo1-fileIFC2--reload"?: ParamValueSerializedTypeMap["button"];
  "geo1-fileIFC2--foundCategories"?: ParamValueSerializedTypeMap["string"];
  "geo1-fileIFC3--url"?: ParamValueSerializedTypeMap["string"];
  "geo1-fileIFC3--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-fileIFC3--coordinateToOrigin"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-fileIFC3--includedCategories"?: ParamValueSerializedTypeMap["string"];
  "geo1-fileIFC3--reload"?: ParamValueSerializedTypeMap["button"];
  "geo1-fileIFC3--foundCategories"?: ParamValueSerializedTypeMap["string"];
  "geo1-hierarchy1--mode"?: ParamValueSerializedTypeMap["integer"];
  "geo1-hierarchy1--levels"?: ParamValueSerializedTypeMap["integer"];
  "geo1-hierarchy1--objectMask"?: ParamValueSerializedTypeMap["string"];
  "geo1-hierarchy1--addChildMode"?: ParamValueSerializedTypeMap["integer"];
  "geo1-instancedMeshToMesh1--cloneGeometry"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-merge2--compact"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-merge2--preserveMaterials"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-merge2--inputsCount"?: ParamValueSerializedTypeMap["integer"];
  "geo1-hierarchy2--mode"?: ParamValueSerializedTypeMap["integer"];
  "geo1-hierarchy2--levels"?: ParamValueSerializedTypeMap["integer"];
  "geo1-hierarchy2--objectMask"?: ParamValueSerializedTypeMap["string"];
  "geo1-hierarchy2--addChildMode"?: ParamValueSerializedTypeMap["integer"];
  "geo1-instancedMeshToMesh2--cloneGeometry"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-merge3--compact"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-merge3--preserveMaterials"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-merge3--inputsCount"?: ParamValueSerializedTypeMap["integer"];
  "geo1-merge4--compact"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-merge4--preserveMaterials"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-merge4--inputsCount"?: ParamValueSerializedTypeMap["integer"];
  "geo1-MAT-meshStandardBuilder_DOORS--default"?: ParamValueSerializedTypeMap["folder"];
  "geo1-MAT-meshStandardBuilder_DOORS--transparent"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--opacity"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandardBuilder_DOORS--alphaTest"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandardBuilder_DOORS--textures"?: ParamValueSerializedTypeMap["folder"];
  "geo1-MAT-meshStandardBuilder_DOORS--useMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--map"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandardBuilder_DOORS--useAlphaMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--alphaMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandardBuilder_DOORS--useAOMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--aoMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandardBuilder_DOORS--aoMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandardBuilder_DOORS--useBumpMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--bumpMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandardBuilder_DOORS--bumpScale"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandardBuilder_DOORS--bumpBias"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandardBuilder_DOORS--useDisplacementMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--displacementMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandardBuilder_DOORS--displacementScale"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandardBuilder_DOORS--displacementBias"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandardBuilder_DOORS--emissive"?: ParamValueSerializedTypeMap["color"];
  "geo1-MAT-meshStandardBuilder_DOORS--emissive-emissiver"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandardBuilder_DOORS--emissive-emissiveg"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandardBuilder_DOORS--emissive-emissiveb"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandardBuilder_DOORS--emissiver"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandardBuilder_DOORS--emissiveg"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandardBuilder_DOORS--emissiveb"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandardBuilder_DOORS--useEmissiveMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--emissiveMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandardBuilder_DOORS--emissiveIntensity"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandardBuilder_DOORS--useEnvMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--envMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandardBuilder_DOORS--envMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandardBuilder_DOORS--useLightMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--lightMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandardBuilder_DOORS--lightMapIntensity"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandardBuilder_DOORS--useNormalMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--normalMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandardBuilder_DOORS--normalMapType"?: ParamValueSerializedTypeMap["integer"];
  "geo1-MAT-meshStandardBuilder_DOORS--normalScale"?: ParamValueSerializedTypeMap["vector2"];
  "geo1-MAT-meshStandardBuilder_DOORS--normalScale-normalScalex"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandardBuilder_DOORS--normalScale-normalScaley"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandardBuilder_DOORS--normalScalex"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandardBuilder_DOORS--normalScaley"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandardBuilder_DOORS--normalScaleMult"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandardBuilder_DOORS--useMetalnessMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--metalnessMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandardBuilder_DOORS--metalness"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandardBuilder_DOORS--useRoughnessMap"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--roughnessMap"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandardBuilder_DOORS--roughness"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandardBuilder_DOORS--advanced"?: ParamValueSerializedTypeMap["folder"];
  "geo1-MAT-meshStandardBuilder_DOORS--setBuilderNode"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--builderNode"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-MAT-meshStandardBuilder_DOORS--doubleSided"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--front"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--overrideShadowSide"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--shadowDoubleSided"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--shadowFront"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--colorWrite"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--depthWrite"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--depthTest"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--premultipliedAlpha"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--blending"?: ParamValueSerializedTypeMap["integer"];
  "geo1-MAT-meshStandardBuilder_DOORS--dithering"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--polygonOffset"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--polygonOffsetFactor"?: ParamValueSerializedTypeMap["integer"];
  "geo1-MAT-meshStandardBuilder_DOORS--polygonOffsetUnits"?: ParamValueSerializedTypeMap["integer"];
  "geo1-MAT-meshStandardBuilder_DOORS--wireframe"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--wireframeLinewidth"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandardBuilder_DOORS--useFog"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--shadowPCSS"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--shadowPCSSFilterSize"?: ParamValueSerializedTypeMap["float"];
  "geo1-MAT-meshStandardBuilder_DOORS--overrideCustomMaterials"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--createCustomMatDistance"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--createCustomMatDepth"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-MAT-meshStandardBuilder_DOORS--createCustomMatDepthDOF"?: ParamValueSerializedTypeMap["boolean"];
  "lights--transform"?: ParamValueSerializedTypeMap["folder"];
  "lights--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "lights--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "lights--t"?: ParamValueSerializedTypeMap["vector3"];
  "lights--t-tx"?: ParamValueSerializedTypeMap["float"];
  "lights--t-ty"?: ParamValueSerializedTypeMap["float"];
  "lights--t-tz"?: ParamValueSerializedTypeMap["float"];
  "lights--tx"?: ParamValueSerializedTypeMap["float"];
  "lights--ty"?: ParamValueSerializedTypeMap["float"];
  "lights--tz"?: ParamValueSerializedTypeMap["float"];
  "lights--r"?: ParamValueSerializedTypeMap["vector3"];
  "lights--r-rx"?: ParamValueSerializedTypeMap["float"];
  "lights--r-ry"?: ParamValueSerializedTypeMap["float"];
  "lights--r-rz"?: ParamValueSerializedTypeMap["float"];
  "lights--rx"?: ParamValueSerializedTypeMap["float"];
  "lights--ry"?: ParamValueSerializedTypeMap["float"];
  "lights--rz"?: ParamValueSerializedTypeMap["float"];
  "lights--s"?: ParamValueSerializedTypeMap["vector3"];
  "lights--s-sx"?: ParamValueSerializedTypeMap["float"];
  "lights--s-sy"?: ParamValueSerializedTypeMap["float"];
  "lights--s-sz"?: ParamValueSerializedTypeMap["float"];
  "lights--sx"?: ParamValueSerializedTypeMap["float"];
  "lights--sy"?: ParamValueSerializedTypeMap["float"];
  "lights--sz"?: ParamValueSerializedTypeMap["float"];
  "lights--scale"?: ParamValueSerializedTypeMap["float"];
  "lights--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "lights--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "lights--display"?: ParamValueSerializedTypeMap["boolean"];
  "lights--renderOrder"?: ParamValueSerializedTypeMap["integer"];
  "lights--CAD"?: ParamValueSerializedTypeMap["folder"];
  "lights--CADLinearTolerance"?: ParamValueSerializedTypeMap["float"];
  "lights--CADAngularTolerance"?: ParamValueSerializedTypeMap["float"];
  "lights--CADCurveAbscissa"?: ParamValueSerializedTypeMap["float"];
  "lights--CADCurveTolerance"?: ParamValueSerializedTypeMap["float"];
  "lights--CADDisplayEdges"?: ParamValueSerializedTypeMap["boolean"];
  "lights--CADEdgesColor"?: ParamValueSerializedTypeMap["color"];
  "lights--CADEdgesColor-CADEdgesColorr"?: ParamValueSerializedTypeMap["float"];
  "lights--CADEdgesColor-CADEdgesColorg"?: ParamValueSerializedTypeMap["float"];
  "lights--CADEdgesColor-CADEdgesColorb"?: ParamValueSerializedTypeMap["float"];
  "lights--CADEdgesColorr"?: ParamValueSerializedTypeMap["float"];
  "lights--CADEdgesColorg"?: ParamValueSerializedTypeMap["float"];
  "lights--CADEdgesColorb"?: ParamValueSerializedTypeMap["float"];
  "lights--CADDisplayMeshes"?: ParamValueSerializedTypeMap["boolean"];
  "lights--CADMeshesColor"?: ParamValueSerializedTypeMap["color"];
  "lights--CADMeshesColor-CADMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "lights--CADMeshesColor-CADMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "lights--CADMeshesColor-CADMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "lights--CADMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "lights--CADMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "lights--CADMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "lights--CADWireframe"?: ParamValueSerializedTypeMap["boolean"];
  "lights--CSG"?: ParamValueSerializedTypeMap["folder"];
  "lights--CSGFacetAngle"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGLinesColor"?: ParamValueSerializedTypeMap["color"];
  "lights--CSGLinesColor-CSGLinesColorr"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGLinesColor-CSGLinesColorg"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGLinesColor-CSGLinesColorb"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGLinesColorr"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGLinesColorg"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGLinesColorb"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGMeshesColor"?: ParamValueSerializedTypeMap["color"];
  "lights--CSGMeshesColor-CSGMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGMeshesColor-CSGMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGMeshesColor-CSGMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "lights--CSGWireframe"?: ParamValueSerializedTypeMap["boolean"];
  "lights--QUAD"?: ParamValueSerializedTypeMap["folder"];
  "lights--QUADTriangles"?: ParamValueSerializedTypeMap["boolean"];
  "lights--QUADSplitQuads"?: ParamValueSerializedTypeMap["boolean"];
  "lights--QUADWireframe"?: ParamValueSerializedTypeMap["boolean"];
  "lights--QUADWireframeColor"?: ParamValueSerializedTypeMap["color"];
  "lights--QUADWireframeColor-QUADWireframeColorr"?: ParamValueSerializedTypeMap["float"];
  "lights--QUADWireframeColor-QUADWireframeColorg"?: ParamValueSerializedTypeMap["float"];
  "lights--QUADWireframeColor-QUADWireframeColorb"?: ParamValueSerializedTypeMap["float"];
  "lights--QUADWireframeColorr"?: ParamValueSerializedTypeMap["float"];
  "lights--QUADWireframeColorg"?: ParamValueSerializedTypeMap["float"];
  "lights--QUADWireframeColorb"?: ParamValueSerializedTypeMap["float"];
  "lights--QUADCenter"?: ParamValueSerializedTypeMap["boolean"];
  "lights--QUADInnerRadius"?: ParamValueSerializedTypeMap["boolean"];
  "lights--QUADOuterRadius"?: ParamValueSerializedTypeMap["boolean"];
  "lights--QUADPointAttributes"?: ParamValueSerializedTypeMap["string"];
  "lights--QUADPrimitiveAttributes"?: ParamValueSerializedTypeMap["string"];
  "lights--TET"?: ParamValueSerializedTypeMap["folder"];
  "lights--TetScale"?: ParamValueSerializedTypeMap["float"];
  "lights--TetDisplayOuterMesh"?: ParamValueSerializedTypeMap["boolean"];
  "lights--TetDisplayTetMesh"?: ParamValueSerializedTypeMap["boolean"];
  "lights--TetDisplayLines"?: ParamValueSerializedTypeMap["boolean"];
  "lights--TetDisplaySharedFaces"?: ParamValueSerializedTypeMap["boolean"];
  "lights--TetDisplayPoints"?: ParamValueSerializedTypeMap["boolean"];
  "lights--TetDisplayCenter"?: ParamValueSerializedTypeMap["boolean"];
  "lights--TetDisplaySphere"?: ParamValueSerializedTypeMap["boolean"];
  "lights-hemisphereLight1--skyColor"?: ParamValueSerializedTypeMap["color"];
  "lights-hemisphereLight1--skyColor-skyColorr"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--skyColor-skyColorg"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--skyColor-skyColorb"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--skyColorr"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--skyColorg"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--skyColorb"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColor"?: ParamValueSerializedTypeMap["color"];
  "lights-hemisphereLight1--groundColor-groundColorr"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColor-groundColorg"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColor-groundColorb"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColorr"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColorg"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--groundColorb"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--intensity"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--position"?: ParamValueSerializedTypeMap["vector3"];
  "lights-hemisphereLight1--position-positionx"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--position-positiony"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--position-positionz"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--positionx"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--positiony"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--positionz"?: ParamValueSerializedTypeMap["float"];
  "lights-hemisphereLight1--name"?: ParamValueSerializedTypeMap["string"];
  "lights-merge1--compact"?: ParamValueSerializedTypeMap["boolean"];
  "lights-merge1--preserveMaterials"?: ParamValueSerializedTypeMap["boolean"];
  "lights-merge1--inputsCount"?: ParamValueSerializedTypeMap["integer"];
  "lights-polarTransform1--applyOn"?: ParamValueSerializedTypeMap["integer"];
  "lights-polarTransform1--center"?: ParamValueSerializedTypeMap["vector3"];
  "lights-polarTransform1--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--center-centery"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--center-centerz"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--centerx"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--centery"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--centerz"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--longitude"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--latitude"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--depth"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--light"?: ParamValueSerializedTypeMap["folder"];
  "lights-spotLight1--color"?: ParamValueSerializedTypeMap["color"];
  "lights-spotLight1--color-colorr"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--color-colorg"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--color-colorb"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--colorr"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--colorg"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--colorb"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--intensity"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--angle"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--penumbra"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--decay"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--distance"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--showHelper"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight1--helperSize"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--tmap"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight1--map"?: ParamValueSerializedTypeMap["node_path"];
  "lights-spotLight1--name"?: ParamValueSerializedTypeMap["string"];
  "lights-spotLight1--shadow"?: ParamValueSerializedTypeMap["folder"];
  "lights-spotLight1--castShadow"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight1--shadowAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight1--shadowUpdateOnNextRender"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight1--shadowRes"?: ParamValueSerializedTypeMap["vector2"];
  "lights-spotLight1--shadowRes-shadowResx"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowRes-shadowResy"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowResx"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowResy"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowBias"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowNear"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowFar"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowRadius"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--volumetric"?: ParamValueSerializedTypeMap["folder"];
  "lights-spotLight1--tvolumetric"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight1--volAttenuation"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--volAnglePower"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--raymarching"?: ParamValueSerializedTypeMap["folder"];
  "lights-spotLight1--raymarchingPenumbra"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--raymarchingShadowBiasAngle"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--raymarchingShadowBiasDistance"?: ParamValueSerializedTypeMap["float"];
  "cameras--transform"?: ParamValueSerializedTypeMap["folder"];
  "cameras--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "cameras--t"?: ParamValueSerializedTypeMap["vector3"];
  "cameras--t-tx"?: ParamValueSerializedTypeMap["float"];
  "cameras--t-ty"?: ParamValueSerializedTypeMap["float"];
  "cameras--t-tz"?: ParamValueSerializedTypeMap["float"];
  "cameras--tx"?: ParamValueSerializedTypeMap["float"];
  "cameras--ty"?: ParamValueSerializedTypeMap["float"];
  "cameras--tz"?: ParamValueSerializedTypeMap["float"];
  "cameras--r"?: ParamValueSerializedTypeMap["vector3"];
  "cameras--r-rx"?: ParamValueSerializedTypeMap["float"];
  "cameras--r-ry"?: ParamValueSerializedTypeMap["float"];
  "cameras--r-rz"?: ParamValueSerializedTypeMap["float"];
  "cameras--rx"?: ParamValueSerializedTypeMap["float"];
  "cameras--ry"?: ParamValueSerializedTypeMap["float"];
  "cameras--rz"?: ParamValueSerializedTypeMap["float"];
  "cameras--s"?: ParamValueSerializedTypeMap["vector3"];
  "cameras--s-sx"?: ParamValueSerializedTypeMap["float"];
  "cameras--s-sy"?: ParamValueSerializedTypeMap["float"];
  "cameras--s-sz"?: ParamValueSerializedTypeMap["float"];
  "cameras--sx"?: ParamValueSerializedTypeMap["float"];
  "cameras--sy"?: ParamValueSerializedTypeMap["float"];
  "cameras--sz"?: ParamValueSerializedTypeMap["float"];
  "cameras--scale"?: ParamValueSerializedTypeMap["float"];
  "cameras--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "cameras--display"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--renderOrder"?: ParamValueSerializedTypeMap["integer"];
  "cameras--CAD"?: ParamValueSerializedTypeMap["folder"];
  "cameras--CADLinearTolerance"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADAngularTolerance"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADCurveAbscissa"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADCurveTolerance"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADDisplayEdges"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--CADEdgesColor"?: ParamValueSerializedTypeMap["color"];
  "cameras--CADEdgesColor-CADEdgesColorr"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADEdgesColor-CADEdgesColorg"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADEdgesColor-CADEdgesColorb"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADEdgesColorr"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADEdgesColorg"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADEdgesColorb"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADDisplayMeshes"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--CADMeshesColor"?: ParamValueSerializedTypeMap["color"];
  "cameras--CADMeshesColor-CADMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADMeshesColor-CADMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADMeshesColor-CADMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "cameras--CADWireframe"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--CSG"?: ParamValueSerializedTypeMap["folder"];
  "cameras--CSGFacetAngle"?: ParamValueSerializedTypeMap["float"];
  "cameras--CSGLinesColor"?: ParamValueSerializedTypeMap["color"];
  "cameras--CSGLinesColor-CSGLinesColorr"?: ParamValueSerializedTypeMap["float"];
  "cameras--CSGLinesColor-CSGLinesColorg"?: ParamValueSerializedTypeMap["float"];
  "cameras--CSGLinesColor-CSGLinesColorb"?: ParamValueSerializedTypeMap["float"];
  "cameras--CSGLinesColorr"?: ParamValueSerializedTypeMap["float"];
  "cameras--CSGLinesColorg"?: ParamValueSerializedTypeMap["float"];
  "cameras--CSGLinesColorb"?: ParamValueSerializedTypeMap["float"];
  "cameras--CSGMeshesColor"?: ParamValueSerializedTypeMap["color"];
  "cameras--CSGMeshesColor-CSGMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "cameras--CSGMeshesColor-CSGMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "cameras--CSGMeshesColor-CSGMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "cameras--CSGMeshesColorr"?: ParamValueSerializedTypeMap["float"];
  "cameras--CSGMeshesColorg"?: ParamValueSerializedTypeMap["float"];
  "cameras--CSGMeshesColorb"?: ParamValueSerializedTypeMap["float"];
  "cameras--CSGWireframe"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--QUAD"?: ParamValueSerializedTypeMap["folder"];
  "cameras--QUADTriangles"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--QUADSplitQuads"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--QUADWireframe"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--QUADWireframeColor"?: ParamValueSerializedTypeMap["color"];
  "cameras--QUADWireframeColor-QUADWireframeColorr"?: ParamValueSerializedTypeMap["float"];
  "cameras--QUADWireframeColor-QUADWireframeColorg"?: ParamValueSerializedTypeMap["float"];
  "cameras--QUADWireframeColor-QUADWireframeColorb"?: ParamValueSerializedTypeMap["float"];
  "cameras--QUADWireframeColorr"?: ParamValueSerializedTypeMap["float"];
  "cameras--QUADWireframeColorg"?: ParamValueSerializedTypeMap["float"];
  "cameras--QUADWireframeColorb"?: ParamValueSerializedTypeMap["float"];
  "cameras--QUADCenter"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--QUADInnerRadius"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--QUADOuterRadius"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--QUADPointAttributes"?: ParamValueSerializedTypeMap["string"];
  "cameras--QUADPrimitiveAttributes"?: ParamValueSerializedTypeMap["string"];
  "cameras--TET"?: ParamValueSerializedTypeMap["folder"];
  "cameras--TetScale"?: ParamValueSerializedTypeMap["float"];
  "cameras--TetDisplayOuterMesh"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--TetDisplayTetMesh"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--TetDisplayLines"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--TetDisplaySharedFaces"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--TetDisplayPoints"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--TetDisplayCenter"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--TetDisplaySphere"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-merge1--compact"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-merge1--preserveMaterials"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-merge1--inputsCount"?: ParamValueSerializedTypeMap["integer"];
  "cameras-perspectiveCamera_FPS--default"?: ParamValueSerializedTypeMap["folder"];
  "cameras-perspectiveCamera_FPS--fov"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_FPS--near"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_FPS--far"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_FPS--position"?: ParamValueSerializedTypeMap["vector3"];
  "cameras-perspectiveCamera_FPS--position-positionx"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_FPS--position-positiony"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_FPS--position-positionz"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_FPS--positionx"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_FPS--positiony"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_FPS--positionz"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_FPS--rotation"?: ParamValueSerializedTypeMap["vector3"];
  "cameras-perspectiveCamera_FPS--rotation-rotationx"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_FPS--rotation-rotationy"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_FPS--rotation-rotationz"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_FPS--rotationx"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_FPS--rotationy"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_FPS--rotationz"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_FPS--showHelper"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-perspectiveCamera_FPS--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-perspectiveCamera_FPS--name"?: ParamValueSerializedTypeMap["string"];
  "cameras-perspectiveCamera_FPS--updateTransformFromCamera"?: ParamValueSerializedTypeMap["button"];
  "cameras-perspectiveCamera_FPS--PBR"?: ParamValueSerializedTypeMap["folder"];
  "cameras-perspectiveCamera_FPS--apertureBlades"?: ParamValueSerializedTypeMap["integer"];
  "cameras-perspectiveCamera_FPS--fStop"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_FPS--focusDistance"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_FPS--apertureRotation"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_FPS--anamorphicRatio"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_ORBIT_CONTROLS--default"?: ParamValueSerializedTypeMap["folder"];
  "cameras-perspectiveCamera_ORBIT_CONTROLS--fov"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_ORBIT_CONTROLS--near"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_ORBIT_CONTROLS--far"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_ORBIT_CONTROLS--position"?: ParamValueSerializedTypeMap["vector3"];
  "cameras-perspectiveCamera_ORBIT_CONTROLS--position-positionx"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_ORBIT_CONTROLS--position-positiony"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_ORBIT_CONTROLS--position-positionz"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_ORBIT_CONTROLS--positionx"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_ORBIT_CONTROLS--positiony"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_ORBIT_CONTROLS--positionz"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_ORBIT_CONTROLS--rotation"?: ParamValueSerializedTypeMap["vector3"];
  "cameras-perspectiveCamera_ORBIT_CONTROLS--rotation-rotationx"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_ORBIT_CONTROLS--rotation-rotationy"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_ORBIT_CONTROLS--rotation-rotationz"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_ORBIT_CONTROLS--rotationx"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_ORBIT_CONTROLS--rotationy"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_ORBIT_CONTROLS--rotationz"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_ORBIT_CONTROLS--showHelper"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-perspectiveCamera_ORBIT_CONTROLS--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-perspectiveCamera_ORBIT_CONTROLS--name"?: ParamValueSerializedTypeMap["string"];
  "cameras-perspectiveCamera_ORBIT_CONTROLS--updateTransformFromCamera"?: ParamValueSerializedTypeMap["button"];
  "cameras-perspectiveCamera_ORBIT_CONTROLS--PBR"?: ParamValueSerializedTypeMap["folder"];
  "cameras-perspectiveCamera_ORBIT_CONTROLS--apertureBlades"?: ParamValueSerializedTypeMap["integer"];
  "cameras-perspectiveCamera_ORBIT_CONTROLS--fStop"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_ORBIT_CONTROLS--focusDistance"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_ORBIT_CONTROLS--apertureRotation"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_ORBIT_CONTROLS--anamorphicRatio"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1--group"?: ParamValueSerializedTypeMap["string"];
  "cameras-cameraControls1--node"?: ParamValueSerializedTypeMap["node_path"];
  "cameras-cameraControls1-cameraOrbitControls1--main"?: ParamValueSerializedTypeMap["folder"];
  "cameras-cameraControls1-cameraOrbitControls1--enabled"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--allowPan"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--allowRotate"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--allowZoom"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--zoomSpeed"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--zoomToCursor"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--tdamping"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--damping"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--screenSpacePanning"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--rotateSpeed"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--limits"?: ParamValueSerializedTypeMap["folder"];
  "cameras-cameraControls1-cameraOrbitControls1--minDistance"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--maxDistance"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--minZoom"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--maxZoom"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--limitAzimuthAngle"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--azimuthAngleRange"?: ParamValueSerializedTypeMap["vector2"];
  "cameras-cameraControls1-cameraOrbitControls1--azimuthAngleRange-azimuthAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--azimuthAngleRange-azimuthAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--azimuthAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--azimuthAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--polarAngleRange"?: ParamValueSerializedTypeMap["vector2"];
  "cameras-cameraControls1-cameraOrbitControls1--polarAngleRange-polarAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--polarAngleRange-polarAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--polarAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--polarAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--clampPosition"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--positionMin"?: ParamValueSerializedTypeMap["vector3"];
  "cameras-cameraControls1-cameraOrbitControls1--positionMin-positionMinx"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--positionMin-positionMiny"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--positionMin-positionMinz"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--positionMinx"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--positionMiny"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--positionMinz"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--positionMax"?: ParamValueSerializedTypeMap["vector3"];
  "cameras-cameraControls1-cameraOrbitControls1--positionMax-positionMaxx"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--positionMax-positionMaxy"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--positionMax-positionMaxz"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--positionMaxx"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--positionMaxy"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--positionMaxz"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--controls"?: ParamValueSerializedTypeMap["folder"];
  "cameras-cameraControls1-cameraOrbitControls1--leftMouseButton"?: ParamValueSerializedTypeMap["integer"];
  "cameras-cameraControls1-cameraOrbitControls1--middleMouseButton"?: ParamValueSerializedTypeMap["integer"];
  "cameras-cameraControls1-cameraOrbitControls1--rightMouseButton"?: ParamValueSerializedTypeMap["integer"];
  "cameras-cameraControls1-cameraOrbitControls1--oneFingerTouch"?: ParamValueSerializedTypeMap["integer"];
  "cameras-cameraControls1-cameraOrbitControls1--twoFingersTouch"?: ParamValueSerializedTypeMap["integer"];
  "cameras-cameraControls1-cameraOrbitControls1--misc"?: ParamValueSerializedTypeMap["folder"];
  "cameras-cameraControls1-cameraOrbitControls1--updateTargetEndMoveEnd"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--target"?: ParamValueSerializedTypeMap["vector3"];
  "cameras-cameraControls1-cameraOrbitControls1--target-targetx"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--target-targety"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--target-targetz"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--targetx"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--targety"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--targetz"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls2--group"?: ParamValueSerializedTypeMap["string"];
  "cameras-cameraControls2--node"?: ParamValueSerializedTypeMap["node_path"];
  "cameras-cameraControls2-firstPersonControls1--main"?: ParamValueSerializedTypeMap["folder"];
  "cameras-cameraControls2-firstPersonControls1--colliderObject"?: ParamValueSerializedTypeMap["node_path"];
  "cameras-cameraControls2-firstPersonControls1--lock"?: ParamValueSerializedTypeMap["button"];
  "cameras-cameraControls2-firstPersonControls1--unlock"?: ParamValueSerializedTypeMap["button"];
  "cameras-cameraControls2-firstPersonControls1--capsuleRadius"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls2-firstPersonControls1--capsuleHeight"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls2-firstPersonControls1--physics"?: ParamValueSerializedTypeMap["folder"];
  "cameras-cameraControls2-firstPersonControls1--physicsSteps"?: ParamValueSerializedTypeMap["integer"];
  "cameras-cameraControls2-firstPersonControls1--gravity"?: ParamValueSerializedTypeMap["vector3"];
  "cameras-cameraControls2-firstPersonControls1--gravity-gravityx"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls2-firstPersonControls1--gravity-gravityy"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls2-firstPersonControls1--gravity-gravityz"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls2-firstPersonControls1--gravityx"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls2-firstPersonControls1--gravityy"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls2-firstPersonControls1--gravityz"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls2-firstPersonControls1--translateSpeed"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls2-firstPersonControls1--rotateSpeed"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls2-firstPersonControls1--jumpAllowed"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls2-firstPersonControls1--jumpStrength"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls2-firstPersonControls1--runAllowed"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls2-firstPersonControls1--runSpeedMult"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls2-firstPersonControls1--updateCollider"?: ParamValueSerializedTypeMap["button"];
  "cameras-cameraControls2-firstPersonControls1--init"?: ParamValueSerializedTypeMap["folder"];
  "cameras-cameraControls2-firstPersonControls1--startPosition"?: ParamValueSerializedTypeMap["vector3"];
  "cameras-cameraControls2-firstPersonControls1--startPosition-startPositionx"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls2-firstPersonControls1--startPosition-startPositiony"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls2-firstPersonControls1--startPosition-startPositionz"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls2-firstPersonControls1--startPositionx"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls2-firstPersonControls1--startPositiony"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls2-firstPersonControls1--startPositionz"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls2-firstPersonControls1--startRotation"?: ParamValueSerializedTypeMap["vector3"];
  "cameras-cameraControls2-firstPersonControls1--startRotation-startRotationx"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls2-firstPersonControls1--startRotation-startRotationy"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls2-firstPersonControls1--startRotation-startRotationz"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls2-firstPersonControls1--startRotationx"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls2-firstPersonControls1--startRotationy"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls2-firstPersonControls1--startRotationz"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls2-firstPersonControls1--reset"?: ParamValueSerializedTypeMap["button"];
  "cameras-cameraControls2-firstPersonControls1--minPolarAngle"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls2-firstPersonControls1--maxPolarAngle"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls2-firstPersonControls1--html"?: ParamValueSerializedTypeMap["folder"];
  "cameras-cameraControls2-firstPersonControls1--customLockCursorElement"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls2-firstPersonControls1--lockCursorElementSelector"?: ParamValueSerializedTypeMap["string"];
}
